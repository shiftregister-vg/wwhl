<?xml version="1.0" encoding="utf-8"?>
<mx:Window xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/halo"
	xmlns:components="spark.components.*" title="Client Manager" creationComplete="init()" height="400" width="685" xmlns:mate="http://mate.asfusion.com/">
	<mx:Canvas label="Manage" width="100%" height="100%">
		<mx:Form x="0" y="0" width="100%" height="100%">
			<mx:FormItem label="Client" width="100%" direction="horizontal">
				<mx:ComboBox id="clientSelect" editable="false" prompt="Select OR Create New Client..." width="100%"
					dataProvider="{clients}" labelField="name" change="clientSelect_changeHandler(event)"/>
				<s:Button label="Delete" width="72" id="deleteClientBtn" enabled="false" click="deleteClientBtn_clickHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem label="Name" width="100%">
				<s:TextInput id="clientNameTI" width="100%" keyUp="inputkeyUpHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem label="Notes" width="100%" height="100%">
				<mx:RichTextEditor width="100%" height="100%" id="notesRTE" keyUp="inputkeyUpHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem label="" width="100%" direction="horizontal" horizontalAlign="right">
				<s:Button label="Save" id="saveEditBtn" click="saveEditBtn_clickHandler(event)" enabled="false" />
				<s:Button label="Cancel" id="cancelEditBtn" click="cancelEditBtn_clickHandler(event)" enabled="false"/>
			</mx:FormItem>
		</mx:Form>
	</mx:Canvas>
	<fx:Script>
		<![CDATA[
			import com.slantsoft.events.DatabaseEvent;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import com.asfusion.mate.ioc.InjectorRegistry;
			
			private var _clients:Array;
			private var lastClientSelectIndex:int = -1;
			
			public function set clients(value:Array):void{
				_clients = value;
				dispatchEvent(new Event("clientsChanged"));
			}
			
			[Bindable ("clientsChanged")]
			public function get clients():Array{
				deleteClientBtn.enabled = false;
				disableSaveCancelBtns();
				clearInputs();
				return _clients;
			}
			
			protected function init():void{
				InjectorRegistry.register(this);
			}

			protected function clientSelect_changeHandler(event:ListEvent):void{
				cancelEditBtn.enabled = true;
				if (saveEditBtn.enabled){
					Alert.show(
						'There are unsaved changes, are you sure you want to lose these changes?',
						'Notice!',
						Alert.YES|Alert.NO,
						this,
						function(event:CloseEvent):void{
							if (event.detail == Alert.YES){
								loadClientData();
							} else {
								// preserve the current content and switch the combobox back to the previously selected index
								clientSelect.selectedIndex = lastClientSelectIndex;
							}
						},
						null,
						Alert.NO
					);
				} else {
					loadClientData();
				}
			}
			
			protected function loadClientData():void{
				lastClientSelectIndex = clientSelect.selectedIndex;
				clientNameTI.text = clientSelect.selectedItem.name;
				notesRTE.htmlText = clientSelect.selectedItem.notes;
				deleteClientBtn.enabled = true;
				disableSaveCancelBtns();
			}
			
			protected function saveEditBtn_clickHandler(event:MouseEvent):void{			
				if (clientNameTI.text.length == 0){
					Alert.show('Client name is required!','Notice!',Alert.OK,this,function(event:CloseEvent):void{
						clientNameTI.setFocus();
					});
					
				} else {
					var client:Object = new Object();
					var e:DatabaseEvent;
					if (clientSelect.selectedItem){
						// save edited client
						e = new DatabaseEvent(DatabaseEvent.UPDATE_CLIENT);
						client.id = clientSelect.selectedItem.id;
						client.cost = clientSelect.selectedItem.cost;
						client.unit = clientSelect.selectedItem.unit;
					} else {
						// save new client
						e = new DatabaseEvent(DatabaseEvent.CREATE_CLIENT);
					}
					client.name = clientNameTI.text;
					client.notes = notesRTE.htmlText;
					e.client = client;
					dispatcher.dispatchEvent(e);
					disableSaveCancelBtns();
					clientNameTI.text = null;
					notesRTE.htmlText = notesRTE.text = notesRTE.textArea.text = null;
				}
			}

			protected function disableSaveCancelBtns():void{
				saveEditBtn.enabled = false;
				saveEditBtn.label = 'Save';
				cancelEditBtn.label = 'Cancel';
			}
			
			protected function cancelEditBtn_clickHandler(event:MouseEvent):void{
				clientSelect.selectedIndex = -1;
				lastClientSelectIndex = -1;
				deleteClientBtn.enabled = false;
				cancelEditBtn.enabled = false;
				disableSaveCancelBtns();
				clearInputs();
			}

			
			protected function clearInputs():void{
				clientNameTI.text = null;
				notesRTE.htmlText = notesRTE.text = notesRTE.textArea.text = null;
			}
			
			protected function inputkeyUpHandler(event:KeyboardEvent):void{
				if (clientSelect.selectedItem){
					// editing a client
					saveEditBtn.label = 'Save Changes';
					cancelEditBtn.label = 'Cancel Changes';
				} else {
					// creating a new client
					saveEditBtn.label = 'Save New Client';
					cancelEditBtn.label = 'Cancel New Client';
				}
				saveEditBtn.enabled = true;
				cancelEditBtn.enabled = true;
			}


			protected function deleteClientBtn_clickHandler(event:MouseEvent):void
			{
				Alert.show("Are you sure you want to delete this client and all associated tracked events? This action can\'t be undone.",
							"Notice!",
							Alert.YES|Alert.NO,
							this,
							function(event:CloseEvent):void{
								if(event.detail == Alert.YES){
									var e:DatabaseEvent = new DatabaseEvent(DatabaseEvent.DELETE_CLIENT);
									e.client = clientSelect.selectedItem;
									dispatcher.dispatchEvent(e);
								}
							},
							null,
							Alert.NO);
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mate:Dispatcher id="dispatcher"/>
	</fx:Declarations>
	
</mx:Window>
